@using Web.Areas.Manager.Models;
@using ApplicationCore.Enums;
@model CompanyViewModel

@{
    ViewBag.Title = "Company Management";
    var lst = ViewData["OwnerList"] as List<ApplicationUser>;
    var message = TempData["Message"];
    }

<head>
    <title>Place Autocomplete</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC2fVXZyo5GUVeiFgqfuRrY6Gvy8W-ZSdo&callback=initMap&libraries=places&v=weekly"
            defer></script>
    <script>
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        function initMap() {
            const map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 40.749933, lng: -73.98633 },
                zoom: 13,
                mapTypeControl: false,
            });
            const card = document.getElementById("pac-card");
            const input = document.getElementById("pac-input");
            const biasInputElement = document.getElementById("use-location-bias");
            const strictBoundsInputElement =
                document.getElementById("use-strict-bounds");
            const options = {
                fields: ["formatted_address", "geometry", "name"],
                strictBounds: false,
                types: ["establishment"],
            };

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

            const autocomplete = new google.maps.places.Autocomplete(
                input,
                options
            );

            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo("bounds", map);

            const infowindow = new google.maps.InfoWindow();
            const infowindowContent = document.getElementById("infowindow-content");

            infowindow.setContent(infowindowContent);

            const marker = new google.maps.Marker({
                map,
                anchorPoint: new google.maps.Point(0, -29),
            });

            autocomplete.addListener("place_changed", () => {
                infowindow.close();
                marker.setVisible(false);

                const place = autocomplete.getPlace();

                if (!place.geometry || !place.geometry.location) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert(
                        "No details available for input: '" + place.name + "'"
                    );
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
                infowindowContent.children["place-name"].textContent = place.name;
                infowindowContent.children["place-address"].textContent =
                    place.formatted_address;
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                const radioButton = document.getElementById(id);

                radioButton.addEventListener("click", () => {
                    autocomplete.setTypes(types);
                    input.value = "";
                });
            }

            setupClickListener("changetype-all", []);
            setupClickListener("changetype-address", ["address"]);
            setupClickListener("changetype-establishment", ["establishment"]);
            setupClickListener("changetype-geocode", ["geocode"]);
            setupClickListener("changetype-cities", ["(cities)"]);
            setupClickListener("changetype-regions", ["(regions)"]);
            biasInputElement.addEventListener("change", () => {
                if (biasInputElement.checked) {
                    autocomplete.bindTo("bounds", map);
                } else {
                    // User wants to turn off location bias, so three things need to happen:
                    // 1. Unbind from map
                    // 2. Reset the bounds to whole world
                    // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
                    autocomplete.unbind("bounds");
                    autocomplete.setBounds({
                        east: 180,
                        west: -180,
                        north: 90,
                        south: -90,
                    });
                    strictBoundsInputElement.checked = biasInputElement.checked;
                }

                input.value = "";
            });
            strictBoundsInputElement.addEventListener("change", () => {
                autocomplete.setOptions({
                    strictBounds: strictBoundsInputElement.checked,
                });
                if (strictBoundsInputElement.checked) {
                    biasInputElement.checked = strictBoundsInputElement.checked;
                    autocomplete.bindTo("bounds", map);
                }

                input.value = "";
            });
        }

        window.initMap = initMap;
    </script>
    <style>
        .card {
            box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);
        }

        .card {
            position: relative;
            display: flex;
            flex-direction: column;
            min-width: 0;
            word-wrap: break-word;
            background-color: #fff;
            background-clip: border-box;
            border: 0 solid rgba(0, 0, 0, .125);
            border-radius: 1rem;
        }

        .card-body {
            -webkit-box-flex: 1;
            -ms-flex: 1 1 auto;
            flex: 1 1 auto;
            padding: 1.5rem 1.5rem;
        }

        .card-header {
            background: white;
        }

        body {
            margin-top: 20px;
            background-color: #eee;
        }
    </style>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Düğmeyi bul
            var button = document.getElementById("showAlertButton");

            // Düğmeye tıklama olayını dinle
            button.addEventListener("click", function () {
                var message = '@TempData["Message"]';
                if (message) {
                    // Create a new div element to display the message
                    var alertDiv = document.createElement("div");
                    alertDiv.className = "alert alert-success";
                    alertDiv.style.position = "fixed";
                    alertDiv.style.bottom = "20px";
                    alertDiv.style.right = "20px";
                    alertDiv.style.zIndex = "1000";
                    alertDiv.innerHTML = message;

                    // Append the div to the document body
                    document.body.appendChild(alertDiv);

                    // Automatically remove the alert after a few seconds
                    setTimeout(function () {
                        alertDiv.style.display = "none";
                    }, 5000); // Adjust the timeout (in milliseconds) as needed
                }
            });
        });
    </script>

</head>

<div class="container-fluid">
    <div class="container">
        <form asp-action="CreateCompany" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="container-fluid">
                <div class="container">
                    <div class="col-lg-12">
                        <div class="card mb-2">
                            <div class="card-body">
                                <div class="card-header text-center" style="padding: 10px; margin: 0;">
                                    <h5 style="margin: 0;">
                                        <strong>Create New Company</strong>
                                    </h5>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-body">

                                    @*<div class="mb-4">
                                            <label asp-for="OwnerId" class="form-label"><strong>OwnerId</strong></label>
                                            <input asp-for="OwnerId" type="text" class="form-control" required>
                                            <span asp-validation-for="OwnerId" class="text-danger"></span>
                                        </div>*@

                                    <div class="mb-4">
                                        <label asp-for="ManagerIds" class="form-label"><strong>Company Manager</strong></label>
                                        <div>
                                            <select id="leaveType" asp-for="ManagerIds" class="form-control" multiple required>
                                                @*<option value="">Seçiniz</option>*@
                                                @if (lst != null)
                                                {
                                                    foreach (var Owner in lst)
                                                    {
                                                        <option value="@Owner">@Owner.FirstName @Owner.LastName</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                        <span asp-validation-for="ManagerIds" class="text-danger"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="CompanyName" class="form-label"><strong>Company Name</strong></label>
                                        <input asp-for="CompanyName" type="text" class="form-control" oninput="sanitizeInput(this)" required>
                                        <span asp-validation-for="CompanyName" class="text-danger"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="CompanyType" class="form-label"><strong>Company Type</strong></label>
                                        <select asp-for="CompanyType" class="form-control" required>
                                            <option value="">Select..</option>
                                            @foreach (var companyType in Enum.GetNames(typeof(CompanyType)).ToList())
                                            {
                                                <option value="@companyType.ToString()">@companyType.Replace("_", " ")</option>
                                            }
                                        </select>
                                        <span asp-validation-for="CompanyType" class="text-danger"></span>
                                    </div>

                                    <div class="mb-4">
                                        <label asp-for="TaxNumber" class="form-label"><strong>Tax Number</strong></label>
                                        <input id="taxNumber" asp-for="TaxNumber" type="number" class="form-control" max="" min="">
                                        <span asp-validation-for="TaxNumber" class="text-danger"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="TaxCompany" class="form-label"><strong>Mersis No</strong></label>
                                        <input id="taxCompany" asp-for="TaxCompany" type="text" class="form-control" readonly>
                                        <span asp-validation-for="TaxCompany" class="text-danger"></span>
                                    </div>
                                    @*<div class="mb-4">
                                            <label asp-for="Email" class="form-label"><strong>Email</strong></label>
                                            <input asp-for="Email" type="text" class="form-control" required>
                                            <span asp-validation-for="Email" class="text-danger"></span>
                                        </div>*@
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="mb-4">
                                        <label asp-for="Logo" class="control-label m-5 mb-1 mt-1"><strong>Logo</strong></label>
                                        <div class="custom-file">
                                            <input asp-for="Logo" class="custom-file-input m-5 mb-2 mt-2" id="Logo" name="Logo" type="file" accept=".jpg, .jpeg, .png" />
                                            <label class="custom-file-label" for="Logo"></label>
                                            <span asp-validation-for="Logo" class="text-danger m-3"></span>
                                        </div>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="PhoneNumber" class="form-label"><strong>Phone Number</strong></label>
                                        <input asp-for="PhoneNumber" type="text" class="form-control">
                                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="EmployeeCount" class="form-label"><strong>EmployeeCount</strong></label>
                                        <input asp-for="EmployeeCount" type="number" class="form-control" required>
                                        <span asp-validation-for="EmployeeCount" class="text-danger"></span>
                                    </div>
                                    <div class="pac-card" id="pac-card">
                                        <div id="pac-container">
                                            <div class="form-group">
                                                <label asp-for="Address" class="control-label"><strong>Address : </strong></label>
                                                <input id="pac-input" asp-for="Address" type="text" class="form-control" placeholder="Enter a location" />
                                                <span asp-validation-for="Address" class="text-danger m-3"></span>
                                            </div>
                                            @*<input id="pac-input" type="text" placeholder="Enter a location" />*@
                                        </div>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="FoundationYear" class="form-label"><strong>Foundation Year</strong></label>
                                        <input id="foundationDate" min="" max="" asp-for="FoundationYear" type="date" class="form-control" required>
                                        <span asp-validation-for="FoundationYear" class="text-danger"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="ContractBeginningDate" class="form-label"><strong>Contract Beginning Date</strong></label>
                                        <input id="contractBeginningDate" min="" max="" asp-for="ContractBeginningDate" type="date" class="form-control" required>
                                        <span asp-validation-for="ContractBeginningDate" class="text-danger"></span>
                                    </div>
                                    <div class="mb-4">
                                        <label asp-for="ContractEndDate" class="form-label"><strong>Contract End Date</strong></label>
                                        <input id="contractEndDate" min="" max="" asp-for="ContractEndDate" type="date" class="form-control" required>
                                        <span asp-validation-for="ContractEndDate" class="text-danger"></span>
                                    </div>
                                </div>
                                <div id="map"></div>
                                <div id="infowindow-content">
                                    <span id="place-name" class="title"></span><br />
                                    <span id="place-address"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Buton -->
            <div class="text-center mb-3">

                <button id="showAlertButton" type="submit" class="btn btn-primary">Create</button>
                <button type="reset" class="btn btn-secondary">Reset</button>

            </div>

            @if (ViewData["ErrorMessagee"] != null)
            {
                <div class="alert alert-danger">
                    @ViewData["ErrorMessagee"]
                </div>
            }
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Find the Submit button by its ID and add a click event listener
        var submitButton = document.querySelector("#showAlertButton");
        submitButton.addEventListener("click", function () {
            // You can add custom logic here for when the Submit button is clicked.
        });

        // Find the Reset button by its type and add a click event listener
        var resetButton = document.querySelector("button[type='reset']");
        resetButton.addEventListener("click", function () {
            // Find the form by its tag name and reset it
            var form = document.querySelector("form");
            form.reset();
        });
    });

    window.onload = function () {
        let taxNumber = document.getElementById("taxNumber");
        let taxCompany = document.getElementById("taxCompany");
        var taxNumberInput = document.getElementById("taxNumber");
        taxNumber.setAttribute("max", "9999999999");
        taxNumber.setAttribute("min", "1223344556");

        var minTaxNumber = 1223344556;
        var maxTaxNumber = 9999999999;

        taxNumberInput.addEventListener("input", function () {
            taxCompany.value = "0" + taxNumber.value + "00016";
            // Kullanıcının girdiği değeri alın
            var enteredValue = parseInt(taxNumberInput.value, 10);

            // Girilen değeri maksimum değerle karşılaştırın
            if (enteredValue > maxTaxNumber) {
                // Maksimum değeri aştıysa hata mesajını gösterin
                errorText.textContent = "Maksimum değeri aşamazsınız.";
                taxNumberInput.value = maxTaxNumber; // Maksimum değeri geri yükleyin
            } else {
                errorText.textContent = ""; // Hata mesajını temizleyin
            }
        });

        // Input öğesine bir "keydown" olay dinleyici ekleyin
        taxNumberInput.addEventListener("keydown", function (event) {
            // Kullanıcının girişini klavye tuşlarını kullanarak kontrol edin
            var enteredValue = parseInt(taxNumberInput.value + event.key, 10);

            // Girilen değeri maksimum değerle karşılaştırın
            if (enteredValue > maxTaxNumber) {
                // Maksimum değeri aştıysa olayı iptal edin
                event.preventDefault();
            }
        });
    };

    function sanitizeInput(input) {
        // Sadece belirli harf ve karakterleri kabul etmek için bir regex kullanabilirsiniz.
        // Bu örnekte sadece A-Z, a-z ve Türkçe karakterleri kabul ediliyor.
        return input.replace(/[^a-zA-ZğüşıöçĞÜŞİÖÇ' ']/g, '').replace(/\s+/g, ' '); // tek boşluğa ve sadece harflere ve Türkçe karakterlere izin veriliyor
    }

    let foundationDate = document.getElementById("foundationDate");
    let contractBeginningDate = document.getElementById("contractBeginningDate");
    let contractEndDate = document.getElementById("contractEndDate");

    let currentDateFoundation = new Date();
    let currentDateBeginning = new Date();
    let currentDateEnd = new Date();
    let currentDate = new Date();

    //let currentYear = currentDate.getFullYear();
    //let currentMonth = currentDate.getMonth() + 1;
    //let currentDay = currentDate.getDate();

    //Foundation Date
    var year = currentDateFoundation.getFullYear(currentDateFoundation.setFullYear(1934));
    var month = (currentDateFoundation.getMonth(currentDateFoundation.setMonth(1))).toString().padStart(2, '0');
    var day = currentDateFoundation.getDate(currentDateFoundation.setDate(1)).toString().padStart(2, '0');
    var minDateValue = year + "-" + month + "-" + day;

    foundationDate.setAttribute("min", minDateValue);
    foundationDate.setAttribute("max", new Date().toISOString().split("T")[0]);

    // Contract beginning date
    var year = currentDateBeginning.getFullYear(currentDateBeginning.setFullYear(1950));
    var month = (currentDateBeginning.getMonth(currentDateBeginning.setMonth(1))).toString().padStart(2, '0');
    var day = currentDateBeginning.getDate(currentDateBeginning.setDate(1)).toString().padStart(2, '0');
    var minDateValue = year + "-" + month + "-" + day;

    contractBeginningDate.setAttribute("min", minDateValue);
    contractBeginningDate.setAttribute("max", new Date().toISOString().split("T")[0]);
    // Beginning date girilince end date otomatik olarak o tarihten sonraki tarihleri göstermeli
    contractBeginningDate.addEventListener("input", function () {

        let currentDate = new Date(contractBeginningDate.value);
        let currentDateMax = new Date(contractBeginningDate.value);

        currentDate.setDate(currentDate.getDate() + 1);
        currentDateMax.setFullYear(currentDateMax.getFullYear() + 10, currentDateMax.getMonth(), currentDateMax.getDate() - 1);

        var year = currentDate.getFullYear();
        var month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        var day = currentDate.getDate().toString().padStart(2, '0');
        var minDateValue = year + "-" + month + "-" + day;
        contractEndDate.setAttribute("min", minDateValue);


        var year = currentDateMax.getFullYear();
        var month = (currentDateMax.getMonth() + 1).toString().padStart(2, '0');
        var day = currentDateMax.getDate().toString().padStart(2, '0');
        var maxDateValue = year + "-" + month + "-" + day;
        contractEndDate.setAttribute("max", maxDateValue);

    });
    //// Contract end date
    //var year = currentDateEnd.getFullYear(currentDateEnd.setFullYear(1950));
    //var month = (currentDateEnd.getMonth(currentDateEnd.setMonth(1))).toString().padStart(2, '0');
    //var day = currentDateEnd.getDate(currentDateEnd.setDate(1)).toString().padStart(2, '0');
    //var minDateValue = year + "-" + month + "-" + day;

    //contractEndDate.setAttribute("min", minDateValue);
    //contractEndDate.setAttribute("max", new Date().toISOString().split("T")[0]);

    document.addEventListener("DOMContentLoaded", function () {
        // Düğmeyi bul
        var button = document.getElementById("showAlertButton");
        if (message != null) {

       
            // Düğmeye tıklama olayını dinle
            button.addEventListener("click", function () {
                // Create bir TempData mesajı
                var message = "Company created successfully.";
                // TempData mesajını sayfaya ekle
                var alertDiv = document.createElement("div");
                alertDiv.className = "alert alert-success";
                alertDiv.style.position = "fixed";
                alertDiv.style.bottom = "20px";
                alertDiv.style.right = "20px";
                alertDiv.style.zIndex = "1000";
                alertDiv.innerHTML = message;
                document.body.appendChild(alertDiv);


                // setTimeout ile alert'ı otomatik olarak kapat
                setTimeout(function () {
                    alertDiv.style.display = "none";
                }, 5000); // 5 saniye sonra kapat

                // Create işlemi tamamlandıktan sonra sayfayı yeniden yükle
                // Bu işlem, TempData mesajını görüntülemek için sayfayı yeniden yükler
                /*window.location.reload();*/
            });
        }
    });

</script>
