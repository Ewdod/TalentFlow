@model Infrastructure.Models.UserViewModel

@{
    ViewBag.Title = "Edit";
}

<head>
    <title>Place Autocomplete</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC2fVXZyo5GUVeiFgqfuRrY6Gvy8W-ZSdo&callback=initMap&libraries=places&v=weekly"
            defer></script>
    <script>
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
        function initMap() {
            const map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 40.749933, lng: -73.98633 },
                zoom: 13,
                mapTypeControl: false,
            });
            const card = document.getElementById("pac-card");
            const input = document.getElementById("pac-input");
            const biasInputElement = document.getElementById("use-location-bias");
            const strictBoundsInputElement =
                document.getElementById("use-strict-bounds");
            const options = {
                fields: ["formatted_address", "geometry", "name"],
                strictBounds: false,
                types: ["establishment"],
            };

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

            const autocomplete = new google.maps.places.Autocomplete(
                input,
                options
            );

            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo("bounds", map);

            const infowindow = new google.maps.InfoWindow();
            const infowindowContent = document.getElementById("infowindow-content");

            infowindow.setContent(infowindowContent);

            const marker = new google.maps.Marker({
                map,
                anchorPoint: new google.maps.Point(0, -29),
            });

            autocomplete.addListener("place_changed", () => {
                infowindow.close();
                marker.setVisible(false);

                const place = autocomplete.getPlace();

                if (!place.geometry || !place.geometry.location) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert(
                        "No details available for input: '" + place.name + "'"
                    );
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
                infowindowContent.children["place-name"].textContent = place.name;
                infowindowContent.children["place-address"].textContent =
                    place.formatted_address;
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                const radioButton = document.getElementById(id);

                radioButton.addEventListener("click", () => {
                    autocomplete.setTypes(types);
                    input.value = "";
                });
            }

            setupClickListener("changetype-all", []);
            setupClickListener("changetype-address", ["address"]);
            setupClickListener("changetype-establishment", ["establishment"]);
            setupClickListener("changetype-geocode", ["geocode"]);
            setupClickListener("changetype-cities", ["(cities)"]);
            setupClickListener("changetype-regions", ["(regions)"]);
            biasInputElement.addEventListener("change", () => {
                if (biasInputElement.checked) {
                    autocomplete.bindTo("bounds", map);
                } else {
                    // User wants to turn off location bias, so three things need to happen:
                    // 1. Unbind from map
                    // 2. Reset the bounds to whole world
                    // 3. Uncheck the strict bounds checkbox UI (which also disables strict bounds)
                    autocomplete.unbind("bounds");
                    autocomplete.setBounds({
                        east: 180,
                        west: -180,
                        north: 90,
                        south: -90,
                    });
                    strictBoundsInputElement.checked = biasInputElement.checked;
                }

                input.value = "";
            });
            strictBoundsInputElement.addEventListener("change", () => {
                autocomplete.setOptions({
                    strictBounds: strictBoundsInputElement.checked,
                });
                if (strictBoundsInputElement.checked) {
                    biasInputElement.checked = strictBoundsInputElement.checked;
                    autocomplete.bindTo("bounds", map);
                }

                input.value = "";
            });
        }

        window.initMap = initMap;
    </script>
    <style>
        /*#map {
                    height: 100%;
                }*/

        /*
                * Optional: Makes the sample page fill the window.
                */
        /*html,
                body {
                    height: 100%;
                    margin: 0;
                    padding: 0;
                }

                #description {
                    font-size: 15px;
                    font-weight: 300;
                }

                #infowindow-content .title {
                    font-weight: bold;
                }

                #infowindow-content {
                    display: none;
                }

                #map #infowindow-content {
                    display: inline;
                }

                .pac-card {
                    background-color: #fff;
                    border: 0;
                    border-radius: 2px;
                    box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
                    margin: 10px;
                    padding: 0 0.5em;
                    font: 400 18px Roboto, Arial, sans-serif;
                    overflow: hidden;
                    padding: 0;
                }

                #pac-container {
                    padding-bottom: 12px;
                    margin-right: 12px;
                }

                .pac-controls {
                    display: inline-block;
                    padding: 5px 11px;
                }

                    .pac-controls label {
                        font-size: 13px;
                        font-weight: 300;
                    }

                #pac-input {
                    background-color: #fff;
                    font-size: 15px;
                    font-weight: 300;
                    margin-left: 12px;
                    padding: 0 11px 0 13px;
                    text-overflow: ellipsis;
                    width: 400px;
                }

                    #pac-input:focus {
                        border-color: #4d90fe;
                    }

                #title {
                    color: #fff;
                    background-color: #4d90fe;
                    font-size: 25px;
                    font-weight: 500;
                    padding: 6px 12px;
                }*/
    </style>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var message = '@TempData["Message"]';
            if (message) {
                // Create a new div element to display the message
                var alertDiv = document.createElement("div");
                alertDiv.className = "alert alert-success";
                alertDiv.style.position = "fixed";
                alertDiv.style.bottom = "20px";
                alertDiv.style.right = "20px";
                alertDiv.style.zIndex = "1000";
                alertDiv.innerHTML = message;

                // Append the div to the document body
                document.body.appendChild(alertDiv);

                // Automatically remove the alert after a few seconds
                setTimeout(function () {
                    alertDiv.style.display = "none";
                }, 5000); // Adjust the timeout (in milliseconds) as needed
            }
        });
    </script>
</head>
<div class="card mx-auto mt-5" style="width: 50rem;">
    <div class="card-header text-center">
        <h1>
            <strong>Update User Informations</strong>
        </h1>
    </div>
    <form asp-action="Edit" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        @*<div class="row g-3">
            <div class="col-12">
            <label asp-for="@Model.Address" class="form-label"></label>
            <input asp-for="@Model.Address" type="text" class="form-control" placeholder="1234 Main St">
            <span asp-validation-for="@Model.Address" class="text-danger"></span>
            </div>
            </div>*@

        @*<div class="form-group">
            <label asp-for="Address" class="control-label m-5 mb-1 mt-1"><strong>Address : </strong></label>
            <input asp-for="Address" class="form-control m-5 mb-2 mt-2" style="width: 40rem;" />
            <span asp-validation-for="Address" class="text-danger m-3"></span>
            </div>*@
        <div class="pac-card" id="pac-card">
            @*<div>
                <div id="title">Autocomplete search</div>
                <div id="type-selector" class="pac-controls">
                <input type="radio"
                name="type"
                id="changetype-all"
                checked="checked" />
                <label for="changetype-all">All</label>

                <input type="radio" name="type" id="changetype-establishment" />
                <label for="changetype-establishment">establishment</label>

                <input type="radio" name="type" id="changetype-address" />
                <label for="changetype-address">address</label>

                <input type="radio" name="type" id="changetype-geocode" />
                <label for="changetype-geocode">geocode</label>

                <input type="radio" name="type" id="changetype-cities" />
                <label for="changetype-cities">(cities)</label>

                <input type="radio" name="type" id="changetype-regions" />
                <label for="changetype-regions">(regions)</label>
                </div>
                <br />
                <div id="strict-bounds-selector" class="pac-controls">
                <input type="checkbox" id="use-location-bias" value="" checked />
                <label for="use-location-bias">Bias to map viewport</label>

                <input type="checkbox" id="use-strict-bounds" value="" />
                <label for="use-strict-bounds">Strict bounds</label>
                </div>
                </div>*@
            <div id="pac-container">
                <div class="form-group">
                    <label asp-for="Address" class="control-label m-5 mb-1 mt-1"><strong>Address : </strong></label>
                    <input id="pac-input" asp-for="Address" type="text" class="form-control m-5 mb-2 mt-2" style="width: 40rem;" placeholder="Enter a location" />
                    <span asp-validation-for="Address" class="text-danger m-3"></span>
                </div>
                @*<input id="pac-input" type="text" placeholder="Enter a location" />*@
            </div>
        </div>
        <div id="map"></div>
        <div id="infowindow-content">
            <span id="place-name" class="title"></span><br />
            <span id="place-address"></span>
        </div>

        <div class="form-group">
            <label asp-for="PhoneNumber" class="control-label m-5 mb-1 mt-1"><strong>Phone Number : </strong></label>
            <input asp-for="PhoneNumber" class="form-control m-5 mb-2 mt-2" style="width: 40rem;" />
            <span asp-validation-for="PhoneNumber" class="text-danger m-5"></span>
        </div>

        <div class="form-group">
            <label asp-for="Photo" class="control-label m-5 mb-1 mt-1"><strong>Photo : </strong></label>
            <div class="custom-file">
                <input asp-for="Photo" class="custom-file-input m-5 mb-2 mt-2" id="photo" name="photo" type="file" accept=".jpg, .jpeg, .png" />
                <label class="custom-file-label" for="photo"></label>
                <span asp-validation-for="Photo" class="text-danger m-3"></span>
            </div>
        </div>

        <div class="text-center" style="margin-top: 2rem;">
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
        <div style="margin-top: 1rem;"></div>
    @*    @if (ViewData["Message"] != null)
        {
            <div class="alert alert-success">@ViewData["Message"]</div>
        }*@
    </form>
</div>
